function findBurstTest()

% call runxunit in this directory to run these tests
t_he12 = ...
    trace_HE(['simhe-2synscales_input5_22B_m47_batch11_all_cond_rank7_somaVm_HE_12.genflac'], ...
             12, '5_22B', 5e-4, 1, 'input5_22B_m47_batch11_all_cond_rank7', ...
             struct('inputDir', '../../input-patterns'));
%plot(t_he12)

[prof_he12, intermediate_data, freerunisistats, tracedata] = ...
    getResults(t_he12, struct('HNweights', 1, 'debug', 1));
%plot(prof_he12, '', struct('fixedSize', [12 4]))

% => pretty bad example, this file should not have been accepted
assert(isnan(prof_he12.results.peri_phase_first), ...
       'This case should have failed - too irregular spiking');

% rank1 example
t_r1_he12 = ...
    trace_HE(['simhe-2synscales_input5_22B_m47_batch11_all_cond_rank1_somaVm_HE_12.genflac'], ...
             12, '5_22B', 5e-4, 1, 'input5_22B_m47_batch11_all_cond_rank1', ...
             struct('inputDir', '../../input-patterns'));
% plot(t_r1_he12)

[prof_r1_he12, intermediate_data, freerunisistats, tracedata] = ...
    getResults(t_r1_he12, struct('HNweights', 1, 'debug', 1));
% also fails with max ipower=6 because of irregular spiking, detected
% with ipower=7
%plot(prof_r1_he12, '', struct('fixedSize', [12 4]))
assert(isnan(prof_r1_he12.results.peri_phase_first), ...
       'This case should have failed - too irregular spiking');

% P condition, top model
[prof3_he12, intermediate_data, freerunisistats, tracedata] = ...
    getResults(...
      trace_HE(['simhe-2synscales_input5_22B_m47_batch8_Pcond_2syns_rank1_somaVm_HE_12.genflac'], ...
               12, '5_22B', 5e-4, 1, 'input5_22B_m47_batch8_Pcond_2syns_rank1', ...
               struct('inputDir', '../../input-patterns')), ...
      struct('HNweights', 1, 'debug', 1));

assertEqual(prof3_he12.results.peri_phase_first, ...
            0.0243146580622805273674824633189928135834634304046630859375, ...
       'P conductance + 2 syns search best model 1st peri spike mismatch.');

% 3rd one is the HN4 reference, so shouldn't change:
assert(prof3_he12.intermediate_data.firstlastraw{3}(1,1) == 23.249056, ...
       'HN4 firstlast ref broken');
